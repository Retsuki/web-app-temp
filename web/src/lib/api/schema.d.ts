/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * ユーザープロフィールを作成
     * @description 新規ユーザーのプロフィールを作成します
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateUserRequest']
        }
      }
      responses: {
        /** @description ユーザープロフィール作成成功 */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CreateUserResponse']
          }
        }
        /** @description クライアントからのリクエストに問題があり、サーバーが処理を完了できませんでした。 */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrBadRequest']
          }
        }
        /** @description 認証が必要です。アクセストークンが無効か期限切れの可能性があります。 */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrUnauthorized']
          }
        }
        /** @description この操作を実行する権限がありません。 */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrForbidden']
          }
        }
        /** @description リクエストされたリソースが見つかりませんでした。 */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrNotFound']
          }
        }
        /** @description リソースの競合が発生しました。 */
        409: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrConflict']
          }
        }
        /** @description サーバー内部でエラーが発生しました。 */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrInternalServer']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 自分のプロフィール取得
     * @description 認証済みユーザーの自分のプロフィール情報を取得します
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description プロフィール取得成功 */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
              data: components['schemas']['UserProfile']
              metadata: {
                /** Format: date-time */
                timestamp: string
                version: string
              }
            }
          }
        }
        /** @description クライアントからのリクエストに問題があり、サーバーが処理を完了できませんでした。 */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrBadRequest']
          }
        }
        /** @description 認証が必要です。アクセストークンが無効か期限切れの可能性があります。 */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrUnauthorized']
          }
        }
        /** @description この操作を実行する権限がありません。 */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrForbidden']
          }
        }
        /** @description リクエストされたリソースが見つかりませんでした。 */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrNotFound']
          }
        }
        /** @description リソースの競合が発生しました。 */
        409: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrConflict']
          }
        }
        /** @description サーバー内部でエラーが発生しました。 */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrInternalServer']
          }
        }
      }
    }
    /**
     * プロフィール更新
     * @description 認証済みユーザーの自分のプロフィール情報を更新します
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': components['schemas']['UpdateProfileRequest']
        }
      }
      responses: {
        /** @description プロフィール更新成功 */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
              data: components['schemas']['UserProfile']
              metadata: {
                /** Format: date-time */
                timestamp: string
                version: string
              }
            }
          }
        }
        /** @description クライアントからのリクエストに問題があり、サーバーが処理を完了できませんでした。 */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrBadRequest']
          }
        }
        /** @description 認証が必要です。アクセストークンが無効か期限切れの可能性があります。 */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrUnauthorized']
          }
        }
        /** @description この操作を実行する権限がありません。 */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrForbidden']
          }
        }
        /** @description リクエストされたリソースが見つかりませんでした。 */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrNotFound']
          }
        }
        /** @description リソースの競合が発生しました。 */
        409: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrConflict']
          }
        }
        /** @description サーバー内部でエラーが発生しました。 */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrInternalServer']
          }
        }
      }
    }
    post?: never
    /**
     * アカウント削除
     * @description 認証済みユーザーのアカウントを論理削除します。この操作は取り消せません。
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': components['schemas']['DeleteAccountRequest']
        }
      }
      responses: {
        /** @description アカウント削除成功 */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description クライアントからのリクエストに問題があり、サーバーが処理を完了できませんでした。 */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrBadRequest']
          }
        }
        /** @description 認証が必要です。アクセストークンが無効か期限切れの可能性があります。 */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrUnauthorized']
          }
        }
        /** @description この操作を実行する権限がありません。 */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrForbidden']
          }
        }
        /** @description リクエストされたリソースが見つかりませんでした。 */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrNotFound']
          }
        }
        /** @description リソースの競合が発生しました。 */
        409: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrConflict']
          }
        }
        /** @description サーバー内部でエラーが発生しました。 */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrInternalServer']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * ヘルスチェック
     * @description APIサーバーの稼働状況を確認します
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description サーバー正常稼働中 */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              status: 'ok'
              /** Format: date-time */
              timestamp: string
              version: string
              uptime: number
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/api/v1/plans': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get available plans
     * @description Get list of available subscription plans
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of available plans */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              plans: {
                /** @enum {string} */
                id: 'free' | 'indie' | 'pro'
                name: string
                description: string
                monthlyPrice: number
                yearlyPrice: number
                features: {
                  projectLimit: number
                  apiCallsPerMonth: number
                  teamMembers: number
                  storage: number
                  /** @enum {string} */
                  support: 'community' | 'email' | 'priority'
                }
              }[]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/api/v1/billing/subscription': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current subscription
     * @description Get current user subscription details
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Current subscription or null */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              subscriptionId: string
              /** @enum {string} */
              plan: 'free' | 'indie' | 'pro'
              /** @enum {string} */
              status: 'active' | 'canceled' | 'past_due' | 'unpaid' | 'incomplete'
              /** @enum {string} */
              billingCycle: 'monthly' | 'yearly'
              /** Format: date-time */
              currentPeriodStart: string
              /** Format: date-time */
              currentPeriodEnd: string
              /** Format: date-time */
              cancelAt: string | null
              /** Format: date-time */
              canceledAt: string | null
            } | null
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    /**
     * Cancel subscription
     * @description Cancel subscription immediately or at period end
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default false */
            immediately?: boolean
          }
        }
      }
      responses: {
        /** @description Subscription canceled successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              subscriptionId: string
              cancelAt: string | null
              message: string
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
        /** @description Subscription not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
      }
    }
    options?: never
    head?: never
    /**
     * Update subscription
     * @description Update subscription plan or billing cycle
     */
    patch: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            planId: 'indie' | 'pro'
            /** @enum {string} */
            billingCycle: 'monthly' | 'yearly'
          }
        }
      }
      responses: {
        /** @description Subscription updated successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              subscriptionId: string
              plan: string
              billingCycle: string
              status: string
              message: string
            }
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
        /** @description Subscription not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
      }
    }
    trace?: never
  }
  '/api/v1/api/v1/billing/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get payment history
     * @description Get user payment history
     */
    get: {
      parameters: {
        query?: {
          limit?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Payment history */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              payments: {
                paymentId: string
                amount: number
                currency: string
                /** @enum {string} */
                status: 'pending' | 'succeeded' | 'failed'
                description: string | null
                /** Format: date-time */
                paidAt: string | null
                /** Format: date-time */
                createdAt: string
              }[]
              hasMore: boolean
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/api/v1/billing/checkout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create checkout session
     * @description Create a Stripe checkout session for subscription
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            planId: 'indie' | 'pro'
            /** @enum {string} */
            billingCycle: 'monthly' | 'yearly'
            /**
             * @default ja
             * @enum {string}
             */
            locale?: 'ja' | 'en'
          }
        }
      }
      responses: {
        /** @description Checkout session created successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** Format: uri */
              checkoutUrl: string
              sessionId: string
            }
          }
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/api/v1/stripe/webhook': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Stripe webhook endpoint
     * @description Endpoint to receive Stripe webhook events
     */
    post: {
      parameters: {
        query?: never
        header: {
          'stripe-signature': string
        }
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'text/plain': string
        }
      }
      responses: {
        /** @description Webhook processed successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              received: boolean
            }
          }
        }
        /** @description Invalid webhook signature */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              error: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    CreateUserResponse: {
      /**
       * Format: uuid
       * @description プロフィールID
       */
      id: string
      /**
       * Format: uuid
       * @description ユーザーID
       */
      userId: string
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string
      /** @description ニックネーム */
      nickname: string
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string
    }
    ErrBadRequest: {
      error: {
        /**
         * @description エラーコード
         * @example INVALID_TOKEN
         * @enum {string}
         */
        code:
          | 'UNAUTHORIZED'
          | 'FORBIDDEN_OPERATION'
          | 'NOT_FOUND'
          | 'INVALID_TOKEN'
          | 'INVALID_TYPE'
          | 'INVALID_REQUEST'
          | 'UNKNOWN_ERROR'
          | 'CONFLICT'
          | 'PROFILE_NOT_FOUND'
        /** @description エラーの説明メッセージ */
        message: string
        /**
         * @description リクエストID
         * @example req_1234
         */
        requestId: string
        /**
         * @description HTTPステータスコード
         * @example 400
         */
        statusCode: number
      }
    }
    ErrUnauthorized: {
      error: {
        /**
         * @description エラーコード
         * @example UNAUTHORIZED
         * @enum {string}
         */
        code:
          | 'UNAUTHORIZED'
          | 'FORBIDDEN_OPERATION'
          | 'NOT_FOUND'
          | 'INVALID_TOKEN'
          | 'INVALID_TYPE'
          | 'INVALID_REQUEST'
          | 'UNKNOWN_ERROR'
          | 'CONFLICT'
          | 'PROFILE_NOT_FOUND'
        /** @description エラーの説明メッセージ */
        message: string
        /**
         * @description リクエストID
         * @example req_1234
         */
        requestId: string
        /**
         * @description HTTPステータスコード
         * @example 401
         */
        statusCode: number
      }
    }
    ErrForbidden: {
      error: {
        /**
         * @description エラーコード
         * @example FORBIDDEN_OPERATION
         * @enum {string}
         */
        code:
          | 'UNAUTHORIZED'
          | 'FORBIDDEN_OPERATION'
          | 'NOT_FOUND'
          | 'INVALID_TOKEN'
          | 'INVALID_TYPE'
          | 'INVALID_REQUEST'
          | 'UNKNOWN_ERROR'
          | 'CONFLICT'
          | 'PROFILE_NOT_FOUND'
        /** @description エラーの説明メッセージ */
        message: string
        /**
         * @description リクエストID
         * @example req_1234
         */
        requestId: string
        /**
         * @description HTTPステータスコード
         * @example 403
         */
        statusCode: number
      }
    }
    ErrNotFound: {
      error: {
        /**
         * @description エラーコード
         * @example NOT_FOUND
         * @enum {string}
         */
        code:
          | 'UNAUTHORIZED'
          | 'FORBIDDEN_OPERATION'
          | 'NOT_FOUND'
          | 'INVALID_TOKEN'
          | 'INVALID_TYPE'
          | 'INVALID_REQUEST'
          | 'UNKNOWN_ERROR'
          | 'CONFLICT'
          | 'PROFILE_NOT_FOUND'
        /** @description エラーの説明メッセージ */
        message: string
        /**
         * @description リクエストID
         * @example req_1234
         */
        requestId: string
        /**
         * @description HTTPステータスコード
         * @example 404
         */
        statusCode: number
      }
    }
    ErrConflict: {
      error: {
        /**
         * @description エラーコード
         * @example CONFLICT
         * @enum {string}
         */
        code:
          | 'UNAUTHORIZED'
          | 'FORBIDDEN_OPERATION'
          | 'NOT_FOUND'
          | 'INVALID_TOKEN'
          | 'INVALID_TYPE'
          | 'INVALID_REQUEST'
          | 'UNKNOWN_ERROR'
          | 'CONFLICT'
          | 'PROFILE_NOT_FOUND'
        /** @description エラーの説明メッセージ */
        message: string
        /**
         * @description リクエストID
         * @example req_1234
         */
        requestId: string
        /**
         * @description HTTPステータスコード
         * @example 409
         */
        statusCode: number
      }
    }
    ErrInternalServer: {
      error: {
        /**
         * @description エラーコード
         * @example UNKNOWN_ERROR
         * @enum {string}
         */
        code:
          | 'UNAUTHORIZED'
          | 'FORBIDDEN_OPERATION'
          | 'NOT_FOUND'
          | 'INVALID_TOKEN'
          | 'INVALID_TYPE'
          | 'INVALID_REQUEST'
          | 'UNKNOWN_ERROR'
          | 'CONFLICT'
          | 'PROFILE_NOT_FOUND'
        /** @description エラーの説明メッセージ */
        message: string
        /**
         * @description リクエストID
         * @example req_1234
         */
        requestId: string
        /**
         * @description HTTPステータスコード
         * @example 500
         */
        statusCode: number
      }
    }
    CreateUserRequest: {
      /**
       * Format: uuid
       * @description Supabase AuthのユーザーID
       */
      userId: string
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string
      /** @description ニックネーム */
      nickname: string
    }
    UserProfile: {
      /**
       * Format: uuid
       * @description プロフィールID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string
      /**
       * Format: uuid
       * @description ユーザーID
       * @example 123e4567-e89b-12d3-a456-426614174001
       */
      userId: string
      /**
       * Format: email
       * @description メールアドレス
       * @example user@example.com
       */
      email: string
      /**
       * @description ニックネーム
       * @example たろう
       */
      nickname: string
      /**
       * Format: date-time
       * @description 作成日時
       * @example 2024-01-01T00:00:00Z
       */
      createdAt: string
      /**
       * Format: date-time
       * @description 更新日時
       * @example 2024-01-01T00:00:00Z
       */
      updatedAt: string
    }
    UpdateProfileRequest: {
      /**
       * @description ニックネーム
       * @example たろう
       */
      nickname?: string
    }
    DeleteAccountRequest: {
      /**
       * @description 削除確認文字列（DELETE_MY_ACCOUNTと入力）
       * @example DELETE_MY_ACCOUNT
       * @enum {string}
       */
      confirmation: 'DELETE_MY_ACCOUNT'
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
